[main]
#shiroFilter = com.company.web.some.FilterImplementation
#shiroFilter.property1 = value1
authc.loginUrl = /login.xhtml
ssl.enabled = false
#authBasic = org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter

#Configurer Realm pour utiliser la dataSource via jndi définit dans standalone
ds = org.apache.shiro.jndi.JndiObjectFactory
ds.resourceName = java:jboss/datasources/biblioDS

#
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm

# Spécifier la requête d'authentification d'un utilisateur dans la DB
jdbcRealm.authenticationQuery = SELECT password FROM tabuser WHERE login = ?
#jdbcRealm.permissionsLookupEnabled = true

# Spécifier la source de données 
jdbcRealm.dataSource = $ds

# Configure JDBC realm password hashing. 
# Attention!!! Il faut avoir utiliser la même cryptographie pour stocker le password
#     user.setPassword(new Sha256Hash(user.getPassword()).toHex());
#     service.create(user);
#  Et faire redisplay="false" dans ui
#credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
#credentialsMatcher.hashAlgorithmName = SHA-256
#jdbcRealm.credentialsMatcher = $credentialsMatcher


# Configure l'authentification via JDBC realm datasource.
#ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
#ds.URL = java:jboss/datasources/biblioDS
#ds.serverName = localhost
#ds.user = root
#ds.password = m@anager
#ds.databaseName = db_contract



[users]

[urls]